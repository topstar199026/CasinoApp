{"version":3,"sources":["webpack:///./node_modules/ethereumjs-common/dist/chains/index.js","webpack:///./node_modules/ethereumjs-common/dist/hardforks/index.js","webpack:///./node_modules/ethereumjs-common/dist/index.js"],"names":["Object","defineProperty","exports","value","chains","names","mainnet","ropsten","rinkeby","kovan","goerli","hardforks","__assign","this","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","chains_1","hardforks_1","Common","chain","hardfork","supportedHardforks","_chainParams","setChain","_hardfork","_supportedHardforks","undefined","setHardfork","forCustomChain","baseChain","customChainParams","standardChainParams","_getChainParams","Error","_i","required_1","param","_isSupportedHardfork","changed","hardforkChanges_1","_chooseHardfork","onlySupported","_getHardfork","hfs_1","hf","chainName","_a","topic","name","hardforkChanges_2","hfChanges","v","paramByBlock","blockNumber","activeHfs","activeHardforks","hardforkIsActiveOnBlock","opts","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","hardfork1","hardfork2","onlyActive","posHf1","posHf2","index","hardforks_2","gteHardfork","hardforkIsActiveOnChain","hfs_2","push","activeHardfork","isHardforkBlock","consensus","finality","genesis","bootstrapNodes","chainId","networkId","default"],"mappings":"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","file":"js/vendor/ethereumjs-common.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chains = {\n    names: {\n        '1': 'mainnet',\n        '3': 'ropsten',\n        '4': 'rinkeby',\n        '42': 'kovan',\n        '6284': 'goerli',\n    },\n    mainnet: require('./mainnet.json'),\n    ropsten: require('./ropsten.json'),\n    rinkeby: require('./rinkeby.json'),\n    kovan: require('./kovan.json'),\n    goerli: require('./goerli.json'),\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hardforks = [\n    ['chainstart', require('./chainstart.json')],\n    ['homestead', require('./homestead.json')],\n    ['dao', require('./dao.json')],\n    ['tangerineWhistle', require('./tangerineWhistle.json')],\n    ['spuriousDragon', require('./spuriousDragon.json')],\n    ['byzantium', require('./byzantium.json')],\n    ['constantinople', require('./constantinople.json')],\n    ['petersburg', require('./petersburg.json')],\n    ['istanbul', require('./istanbul.json')],\n    ['muirGlacier', require('./muirGlacier.json')],\n];\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\n * Common class to access chain and hardfork parameters\n */\nvar Common = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param chain String ('mainnet') or Number (1) chain\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    function Common(chain, hardfork, supportedHardforks) {\n        this._chainParams = this.setChain(chain);\n        this._hardfork = null;\n        this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n        if (hardfork) {\n            this.setHardfork(hardfork);\n        }\n    }\n    /**\n     * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n     * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n    };\n    Common._getChainParams = function (chain) {\n        if (typeof chain === 'number') {\n            if (chains_1.chains['names'][chain]) {\n                return chains_1.chains[chains_1.chains['names'][chain]];\n            }\n            throw new Error(\"Chain with ID \" + chain + \" not supported\");\n        }\n        if (chains_1.chains[chain]) {\n            return chains_1.chains[chain];\n        }\n        throw new Error(\"Chain with name \" + chain + \" not supported\");\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        if (typeof chain === 'number' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain);\n        }\n        else if (typeof chain === 'object') {\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n                var param = required_1[_i];\n                if (chain[param] === undefined) {\n                    throw new Error(\"Missing required chain parameter: \" + param);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier ('byzantium')\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        var changed = false;\n        for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n            var hfChanges = hardforkChanges_1[_i];\n            if (hfChanges[0] === hardfork) {\n                this._hardfork = hardfork;\n                changed = true;\n            }\n        }\n        if (!changed) {\n            throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n        }\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        onlySupported = onlySupported === undefined ? true : onlySupported;\n        if (!hardfork) {\n            if (!this._hardfork) {\n                throw new Error('Method called with neither a hardfork set nor provided by param');\n            }\n            else {\n                hardfork = this._hardfork;\n            }\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n            var hf = hfs_1[_i];\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        if (this._supportedHardforks.length > 0) {\n            for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n                var supportedHf = _a[_i];\n                if (hardfork === supportedHf)\n                    return true;\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name, optional if hardfork set\n     */\n    Common.prototype.param = function (topic, name, hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        var value;\n        for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n            var hfChanges = hardforkChanges_2[_i];\n            if (!hfChanges[1][topic]) {\n                throw new Error(\"Topic \" + topic + \" not defined\");\n            }\n            if (hfChanges[1][topic][name] !== undefined) {\n                value = hfChanges[1][topic][name].v;\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        if (value === undefined) {\n            throw new Error(topic + \" value for \" + name + \" not found\");\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.param(topic, name, hardfork);\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlock(hardfork);\n        if (hfBlock !== null && blockNumber >= hfBlock)\n            return true;\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n            var hf = hardforks_2[_i];\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n            var hf = _a[_i];\n            if (hf['name'] === hardfork && hf['block'] !== null)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n            var hf = hfs_2[_i];\n            if (hf['block'] === null)\n                continue;\n            if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                break;\n            if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                continue;\n            activeHardforks.push(hf);\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        return this._getHardfork(hardfork)['block'];\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block of the current chain\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        if (this.hardforkBlock(hardfork) === blockNumber) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Provide the consensus type for the hardfork set or provided as param\n     * @param hardfork Hardfork name, optional if hardfork set\n     * @returns Consensus type (e.g. 'pow', 'poa')\n     */\n    Common.prototype.consensus = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['consensus'];\n    };\n    /**\n     * Provide the finality type for the hardfork set or provided as param\n     * @param {String} hardfork Hardfork name, optional if hardfork set\n     * @returns {String} Finality type (e.g. 'pos', null of no finality)\n     */\n    Common.prototype.finality = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['finality'];\n    };\n    /**\n     * Returns the Genesis parameters of current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainId = function () {\n        return this._chainParams['chainId'];\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkId = function () {\n        return this._chainParams['networkId'];\n    };\n    return Common;\n}());\nexports.default = Common;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}