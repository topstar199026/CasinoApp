{"version":3,"sources":["webpack:///./node_modules/@ethersproject/logger/lib.esm/index.js","webpack:///./node_modules/@ethersproject/logger/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/rlp/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/rlp/lib.esm/index.js","webpack:///./node_modules/@ethersproject/bignumber/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js","webpack:///./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js","webpack:///./node_modules/@ethersproject/address/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/address/lib.esm/index.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/fragments.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/address.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/array.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/null.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/number.js","webpack:///./node_modules/@ethersproject/strings/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/strings/lib.esm/utf8.js","webpack:///./node_modules/@ethersproject/strings/lib.esm/idna.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/string.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/abi-coder.js","webpack:///./node_modules/@ethersproject/hash/lib.esm/index.js","webpack:///./node_modules/@ethersproject/hash/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/abi/lib.esm/interface.js","webpack:///./node_modules/@ethersproject/bytes/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/bytes/lib.esm/index.js","webpack:///./node_modules/@ethersproject/signing-key/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/signing-key/lib.esm/index.js","webpack:///./node_modules/@ethersproject/transactions/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/transactions/lib.esm/index.js","webpack:///./node_modules/@ethersproject/keccak256/lib.esm/index.js","webpack:///./node_modules/@ethersproject/properties/lib.esm/index.js","webpack:///./node_modules/@ethersproject/properties/lib.esm/_version.js","webpack:///./node_modules/@ethersproject/constants/lib.esm/index.js","webpack:///./node_modules/@ethersproject/keccak256/node_modules/js-sha3/src/sha3.js"],"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","version","Object","defineProperty","this","enumerable","value","writable","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","JSON","stringify","toString","reason","name","throwError","INVALID_ARGUMENT","argument","UNSUPPORTED_OPERATION","operation","NUMERIC_FAULT","fault","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","MISSING_NEW","censorship","permanent","globalLogger","warn","logger","arrayifyInteger","result","unshift","unarrayifyInteger","data","offset","i","encode","object","_encode","Array","isArray","payload","child","concat","prototype","slice","call","_decodeChildren","childOffset","decoded","_decode","consumed","BUFFER_OVERRUN","lengthLength","decode","bytes","_constructorGuard","constructorGuard","hex","checkNew","_hex","_isBigNumber","freeze","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","sub","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","arguments","match","toHex","toHexString","zeros","getChecksumAddress","address","chars","split","expanded","Uint8Array","charCodeAt","hashed","toUpperCase","ibanLookup","safeDigits","Math","floor","x","log10","LN10","ibanChecksum","map","c","block","parseInt","checksum","getAddress","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","type","indexOf","populate","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","arrayLength","arrayChildren","fromObject","components","baseType","_isParamType","format","undefined","indexed","comp","parse","allowIndexed","fromString","isParamType","verifyType","node","ParamTypify","param","originalParam","newNode","parent","state","allowType","replace","allowParams","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","accum","depth","splitNesting","_isFragment","isFragment","EventFragment","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","verifyState","payble","isConstructorFragment","parens","ouputs","outputs","output","isFunctionFragment","returns","regexIdentifier","checkResultErrors","checkErrors","path","childPath","Coder","localName","dynamic","wordSize","_data","_padding","_writeData","_getValue","writeValue","set","coerceFunc","_offset","_coerceFunc","coerce","alignedLength","ceil","_peekBytes","readBytes","super","writer","_throwError","reader","readValue","coder","pack","coders","values","arrayValues","staticWriter","dynamicWriter","updateFuncs","index","dynamicOffset","updateFunc","writeUpdatableValue","baseOffset","func","writeBytes","unpack","baseReader","subReader","dynamicLength","offsetReader","get","checkArgumentCount","size","signed","v","maxUintValue","mask","bounds","UnicodeNormalizationForm","Utf8ErrorReason","ignoreFunc","badCodepoint","BAD_PREFIX","UNEXPECTED_CONTINUE","o","OVERRUN","Utf8ErrorFuncs","ignore","OVERLONG","getUtf8CodePoints","onError","extraLength","overlongMask","res","j","nextChar","MISSING_CONTINUE","OUT_OF_RANGE","UTF16_SURROGATE","toUtf8Bytes","str","current","checkNormalize","c2","pair","_toUtf8String","codePoints","codePoint","toUtf8String","createTable","lo","createRangeTable","hi","l","h","types","paramTypeBytes","paramTypeNumber","_getCoder","component","_getWordSize","_getWriter","_getReader","defaultAbiCoder","id","text","_isIndexed","wrapAccessError","property","wrap","checkNames","fragment","reduce","fragments","abi","filter","bucket","deploy","functions","events","signature","functionFragment","eventFragment","nameOrSignatureOrSighash","getSighash","matching","f","nameOrSignatureOrTopic","topichash","getEventTopic","getFunction","constructor","getEvent","_abiCoder","_encodeParams","_decodeParams","errorSignature","CALL_EXCEPTION","method","errorArgs","topics","encodeTopic","pop","dataTypes","dataValues","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","tx","topic","decodeEventLog","_isInterface","isHexable","addSlice","array","isBytesLike","isHexString","isBytes","arrayify","options","checkSafeUint53","allowMissingPrefix","hexPad","items","objects","item","stripZeros","start","hexlify","hexDataLength","hexDataSlice","endOffset","hexZeroPad","splitSignature","r","s","_vs","recoveryParam","vs","zeroPad","_curve","getCurve","privateKey","keyPair","keyFromPrivate","getPublic","p0","keyFromPublic","publicKey","p1","pub","encodeCompressed","digest","sign","canonical","otherKey","otherKeyPair","computePublicKey","derive","_isSigningKey","compressed","signingKey","handleNumber","transactionFields","maxLength","numeric","allowedTransactionKeys","chainId","gasLimit","gasPrice","nonce","to","computeAddress","recoverAddress","sig","rs","recoverPubKey","recoverPublicKey","serialize","transaction","raw","fieldInfo","rawTransaction","keccak256","keccak_256","defineReadOnly","getStatic","ctor","getPrototypeOf","checkProperties","properties","opaque","bigint","boolean","number","string","_deepCopy","_isFrozen","isFrozen","deepCopy","Description","HashZero","NegativeOne","Zero","One","MaxUint256","root","window","JS_SHA3_NO_NODE_JS","process","versions","global","COMMON_JS","JS_SHA3_NO_COMMON_JS","module","exports","HEX_CHARS","SHIFT","RC","BITS","OUTPUT_TYPES","createOutputMethod","bits","padding","outputType","Keccak","update","createShakeOutputMethod","outputBits","createMethod","create","algorithms","methods","methodNames","algorithm","methodName","blocks","reset","blockCount","byteCount","outputBlocks","extraBytes","notString","ArrayBuffer","lastByteIndex","finalize","arrayBuffer","buffer","Uint32Array","n","c0","c1","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49"],"mappings":"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","file":"js/vendor/ethersproject.js","sourcesContent":["\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficien funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n;\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            try {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n","export const version = \"logger/5.0.0-beta.137\";\n","export const version = \"rlp/5.0.0-beta.133\";\n","\"use strict\";\n//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { arrayify, hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    if (!isBytesLike(object)) {\n        logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n    }\n    const data = Array.prototype.slice.call(arrayify(object));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nexport function encode(object) {\n    return hexlify(_encode(object));\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        if (childOffset > offset + 1 + length) {\n            logger.throwError(\"child data too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n    }\n    return { consumed: (1 + length), result: result };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    if (data.length === 0) {\n        logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data short segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data long segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    }\n    else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1, length);\n    }\n    else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result };\n    }\n    else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result };\n    }\n    return { consumed: 1, result: hexlify(data[offset]) };\n}\nexport function decode(data) {\n    const bytes = arrayify(data);\n    const decoded = _decode(bytes, 0);\n    if (decoded.consumed !== bytes.length) {\n        logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n    }\n    return decoded.result;\n}\n","export const version = \"bignumber/5.0.0-beta.139\";\n","\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\nimport { BN } from \"bn.js\";\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        logger.checkNew(new.target, BigNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division by zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        return toBigNumber(toBN(this).pow(toBN(other)));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot mask negative values\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check\n        if (arguments.length !== 0) {\n            logger.throwError(\"bigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/-?0x[0-9a-f]+/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        if (typeof (value) === \"bigint\") {\n            return BigNumber.from(value.toString());\n        }\n        if (isBytes(value)) {\n            return BigNumber.from(hexlify(value));\n        }\n        if (value._hex && isHexString(value._hex)) {\n            return BigNumber.from(value._hex);\n        }\n        if (value.toHexString) {\n            value = value.toHexString();\n            if (typeof (value) === \"string\") {\n                return BigNumber.from(value);\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have mulitple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n","\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    value = whole + \".\" + fraction;\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.,]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    if (multiplier.length - 1 === 0) {\n        return BigNumber.from(value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Prevent underflow\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else if (value != null) {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        logger.checkNew(new.target, FixedNumber);\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        // If we are already in range, we're done\n        let comps = this.toString().split(\".\");\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        // Bump the value up by the 0.00...0005\n        const bump = \"0.\" + zeros.substring(0, decimals) + \"5\";\n        comps = this.addUnsafe(FixedNumber.fromString(bump, this.format))._value.split(\".\");\n        // Now it is safe to truncate\n        return FixedNumber.fromString(comps[0] + \".\" + comps[1].substring(0, decimals));\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\n","export const version = \"address/5.0.0-beta.135\";\n","\"use strict\";\n// We use this for base 36 maths\nimport { BN } from \"bn.js\";\nimport { arrayify, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction getChecksumAddress(address) {\n    if (!isHexString(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = arrayify(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nexport function getAddress(address) {\n    let result = null;\n    if (typeof (address) !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n            address = \"0x\" + address;\n        }\n        result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n        // Maybe ICAP? (we only support direct mode)\n    }\n    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n        result = (new BN(address.substring(4), 36)).toString(16);\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        result = getChecksumAddress(\"0x\" + result);\n    }\n    else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n}\nexport function isAddress(address) {\n    try {\n        getAddress(address);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function getIcapAddress(address) {\n    let base36 = (new BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction) {\n    let from = null;\n    try {\n        from = getAddress(transaction.from);\n    }\n    catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n}\nexport function getCreate2Address(from, salt, initCodeHash) {\n    if (hexDataLength(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}\n","export const version = \"abi/5.0.0-beta.153\";\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readble with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, addres bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payble: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payble: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                ouputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class ErrorFragment extends Fragment {\n//}\n//export class StructFragment extends Fragment {\n//}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\nconst regexIdentifier = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n","\"use strict\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = arrayify([]);\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() { return hexlify(this._data); }\n    get length() { return this._data.length; }\n    _writeData(data) {\n        this._data = concat([this._data, data]);\n        return data.length;\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        if (bytes.length % this.wordSize) {\n            bytes = concat([bytes, this._padding.slice(bytes.length % this.wordSize)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        let offset = this.length;\n        this.writeValue(0);\n        return (value) => {\n            this._data.set(this._getValue(value), offset);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this._data.length,\n                offset: this._offset + alignedLength\n            });\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc);\n    }\n    readBytes(length) {\n        let bytes = this._peekBytes(0, length);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    encode(writer, value) {\n        try {\n            getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    if (Array.isArray(values)) {\n        // do nothing\n    }\n    else if (values && typeof (values) === \"object\") {\n        let arrayValues = [];\n        coders.forEach(function (coder) {\n            arrayValues.push(values[coder.localName]);\n        });\n        values = arrayValues;\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== values.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = values[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.writeBytes(staticWriter.data);\n    length += writer.writeBytes(dynamicWriter.data);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    // The amount of dynamic data read; to consume later to synchronize\n    let dynamicLength = 0;\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n            dynamicLength += offsetReader.consumed;\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // @TODO: get rid of this an see if it still works?\n    // Consume the dynamic components in the main reader\n    reader.readBytes(dynamicLength);\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(count, value.length, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber());\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n","export const version = \"strings/5.0.0-beta.137\";\n","\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong reperesentation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = arrayify(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            }\n            else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid contimuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8: return \"\\\\b\";\n                case 9: return \"\\\\t\";\n                case 10: return \"\\\\n\";\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n","\"use strict\";\nimport { toUtf8CodePoints, _toUtf8String, UnicodeNormalizationForm } from \"./utf8\";\nfunction bytes2(data) {\n    if ((data.length % 4) !== 0) {\n        throw new Error(\"bad data\");\n    }\n    let result = [];\n    for (let i = 0; i < data.length; i += 4) {\n        result.push(parseInt(data.substring(i, i + 4), 16));\n    }\n    return result;\n}\nfunction createTable(data, func) {\n    if (!func) {\n        func = function (value) { return [parseInt(value, 16)]; };\n    }\n    let lo = 0;\n    let result = {};\n    data.split(\",\").forEach((pair) => {\n        let comps = pair.split(\":\");\n        lo += parseInt(comps[0], 16);\n        result[lo] = func(comps[1]);\n    });\n    return result;\n}\nfunction createRangeTable(data) {\n    let hi = 0;\n    return data.split(\",\").map((v) => {\n        let comps = v.split(\"-\");\n        if (comps.length === 1) {\n            comps[1] = \"0\";\n        }\n        else if (comps[1] === \"\") {\n            comps[1] = \"1\";\n        }\n        let lo = hi + parseInt(comps[0], 16);\n        hi = parseInt(comps[1], 16);\n        return { l: lo, h: hi };\n    });\n}\nfunction matchMap(value, ranges) {\n    let lo = 0;\n    for (let i = 0; i < ranges.length; i++) {\n        let range = ranges[i];\n        lo += range.l;\n        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {\n            if (range.e && range.e.indexOf(value - lo) !== -1) {\n                continue;\n            }\n            return range;\n        }\n    }\n    return null;\n}\nconst Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n// @TODO: Make this relative...\nconst Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((v) => parseInt(v, 16));\nconst Table_B_2_ranges = [\n    { h: 25, s: 32, l: 65 },\n    { h: 30, s: 32, e: [23], l: 127 },\n    { h: 54, s: 1, e: [48], l: 64, d: 2 },\n    { h: 14, s: 1, l: 57, d: 2 },\n    { h: 44, s: 1, l: 17, d: 2 },\n    { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },\n    { h: 16, s: 1, l: 68, d: 2 },\n    { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },\n    { h: 26, s: 32, e: [17], l: 435 },\n    { h: 22, s: 1, l: 71, d: 2 },\n    { h: 15, s: 80, l: 40 },\n    { h: 31, s: 32, l: 16 },\n    { h: 32, s: 1, l: 80, d: 2 },\n    { h: 52, s: 1, l: 42, d: 2 },\n    { h: 12, s: 1, l: 55, d: 2 },\n    { h: 40, s: 1, e: [38], l: 15, d: 2 },\n    { h: 14, s: 1, l: 48, d: 2 },\n    { h: 37, s: 48, l: 49 },\n    { h: 148, s: 1, l: 6351, d: 2 },\n    { h: 88, s: 1, l: 160, d: 2 },\n    { h: 15, s: 16, l: 704 },\n    { h: 25, s: 26, l: 854 },\n    { h: 25, s: 32, l: 55915 },\n    { h: 37, s: 40, l: 1247 },\n    { h: 25, s: -119711, l: 53248 },\n    { h: 25, s: -119763, l: 52 },\n    { h: 25, s: -119815, l: 52 },\n    { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },\n    { h: 25, s: -119919, l: 52 },\n    { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },\n    { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },\n    { h: 25, s: -120075, l: 52 },\n    { h: 25, s: -120127, l: 52 },\n    { h: 25, s: -120179, l: 52 },\n    { h: 25, s: -120231, l: 52 },\n    { h: 25, s: -120283, l: 52 },\n    { h: 25, s: -120335, l: 52 },\n    { h: 24, s: -119543, e: [17], l: 56 },\n    { h: 24, s: -119601, e: [17], l: 58 },\n    { h: 24, s: -119659, e: [17], l: 58 },\n    { h: 24, s: -119717, e: [17], l: 58 },\n    { h: 24, s: -119775, e: [17], l: 58 }\n];\nconst Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\nconst Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\nconst Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\nconst Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nfunction flatten(values) {\n    return values.reduce((accum, value) => {\n        value.forEach((value) => { accum.push(value); });\n        return accum;\n    }, []);\n}\nexport function _nameprepTableA1(codepoint) {\n    return !!matchMap(codepoint, Table_A_1_ranges);\n}\nexport function _nameprepTableB2(codepoint) {\n    let range = matchMap(codepoint, Table_B_2_ranges);\n    if (range) {\n        return [codepoint + range.s];\n    }\n    let codes = Table_B_2_lut_abs[codepoint];\n    if (codes) {\n        return codes;\n    }\n    let shift = Table_B_2_lut_rel[codepoint];\n    if (shift) {\n        return [codepoint + shift[0]];\n    }\n    let complex = Table_B_2_complex[codepoint];\n    if (complex) {\n        return complex;\n    }\n    return null;\n}\nexport function _nameprepTableC(codepoint) {\n    return !!matchMap(codepoint, Table_C_ranges);\n}\nexport function nameprep(value) {\n    // This allows platforms with incomplete normalize to bypass\n    // it for very basic names which the built-in toLowerCase\n    // will certainly handle correctly\n    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {\n        return value.toLowerCase();\n    }\n    // Get the code points (keeping the current normalization)\n    let codes = toUtf8CodePoints(value);\n    codes = flatten(codes.map((code) => {\n        // Substitute Table B.1 (Maps to Nothing)\n        if (Table_B_1_flags.indexOf(code) >= 0) {\n            return [];\n        }\n        if (code >= 0xfe00 && code <= 0xfe0f) {\n            return [];\n        }\n        // Substitute Table B.2 (Case Folding)\n        let codesTableB2 = _nameprepTableB2(code);\n        if (codesTableB2) {\n            return codesTableB2;\n        }\n        // No Substitution\n        return [code];\n    }));\n    // Normalize using form KC\n    codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);\n    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9\n    codes.forEach((code) => {\n        if (_nameprepTableC(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n        }\n    });\n    // Prohibit Unassigned Code Points (Table A.1)\n    codes.forEach((code) => {\n        if (_nameprepTableA1(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n        }\n    });\n    // IDNA extras\n    let name = _toUtf8String(codes);\n    // IDNA: 4.2.3.1\n    if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n        throw new Error(\"invalid hyphen\");\n    }\n    // IDNA: 4.2.4\n    if (name.length > 63) {\n        throw new Error(\"too long\");\n    }\n    return name;\n}\n","\"use strict\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { DynamicBytesCoder } from \"./bytes\";\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    encode(writer, value) {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n","\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        logger.checkNew(new.target, AbiCoder);\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data)));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n","\"use strict\";\nimport { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nconst Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n    try {\n        const comps = name.split(\".\");\n        for (let i = 0; i < comps.length; i++) {\n            if (nameprep(comps[i]).length === 0) {\n                throw new Error(\"empty\");\n            }\n        }\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function namehash(name) {\n    if (typeof (name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address - \" + String(name), \"name\", name);\n    }\n    let result = Zeros;\n    while (name.length) {\n        const partition = name.match(Partition);\n        const label = toUtf8Bytes(nameprep(partition[3]));\n        result = keccak256(concat([result, keccak256(label)]));\n        name = partition[2] || \"\";\n    }\n    return hexlify(result);\n}\nexport function id(text) {\n    return keccak256(toUtf8Bytes(text));\n}\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nexport function hashMessage(message) {\n    if (typeof (message) === \"string\") {\n        message = toUtf8Bytes(message);\n    }\n    return keccak256(concat([\n        toUtf8Bytes(messagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n","export const version = \"hash/5.0.0-beta.134\";\n","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\nfunction checkNames(fragment, type, params) {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${type} parameter ${JSON.stringify(param.name)} in ${fragment.format(\"full\")}`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, {});\n}\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    checkNames(fragment, \"output\", fragment.outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n","export const version = \"bytes/5.0.0-beta.138\";\n","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (value.length == null) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (v < 0 || v >= 256 || (v % 1)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else if (result.recoveryParam !== (1 - (result.v % 2))) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n","export const version = \"signing-key/5.0.0-beta.136\";\n","\"use strict\";\nimport { ec as EC } from \"elliptic\";\nimport { arrayify, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\nexport class SigningKey {\n    constructor(privateKey) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 = getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const signature = keyPair.sign(arrayify(digest), { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n}\nexport function recoverPublicKey(digest, signature) {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n    const bytes = arrayify(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n","export const version = \"transactions/5.0.0-beta.136\";\n","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros, } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return Zero;\n    }\n    return BigNumber.from(value);\n}\nconst transactionFields = [\n    { name: \"nonce\", maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\", length: 20 },\n    { name: \"value\", maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nexport function computeAddress(key) {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nexport function serialize(transaction, signature) {\n    checkProperties(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        let value = transaction[fieldInfo.name] || ([]);\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = arrayify(hexlify(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n            }\n        }\n        raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof (chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    }\n    else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId));\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transation\n    if (!signature) {\n        return RLP.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    }\n    else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return RLP.encode(raw);\n}\nexport function parse(rawTransaction) {\n    const transaction = RLP.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n    }\n    catch (error) {\n        console.log(error);\n        return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = keccak256(RLP.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) {\n            console.log(error);\n        }\n        tx.hash = keccak256(rawTransaction);\n    }\n    return tx;\n}\n","\"use strict\";\nimport sha3 from \"js-sha3\";\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function keccak256(data) {\n    return '0x' + sha3.keccak_256(arrayify(data));\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            if (!_isFrozen(object[keys[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n","export const version = \"properties/5.0.0-beta.143\";\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\nconst HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n// NFKC (composed)             // (decomposed)\nconst EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst Two = BigNumber.from(2);\nconst WeiPerEther = BigNumber.from(\"1000000000000000000\");\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nexport { AddressZero, HashZero, EtherSymbol, NegativeOne, Zero, One, Two, WeiPerEther, MaxUint256 };\n","/**\r\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\r\n *\r\n * @version 0.5.7\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2015-2016\r\n * @license MIT\r\n */\r\n/*jslint bitwise: true */\r\n(function () {\r\n  'use strict';\r\n\r\n  var root = typeof window === 'object' ? window : {};\r\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  }\r\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\r\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\r\n  var PADDING = [6, 1536, 393216, 100663296];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\r\n            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\r\n            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\r\n            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\r\n            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\r\n  var BITS = [224, 256, 384, 512];\r\n  var SHAKE_BITS = [128, 256];\r\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];\r\n\r\n  var createOutputMethod = function (bits, padding, outputType) {\r\n    return function (message) {\r\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createShakeOutputMethod = function (bits, padding, outputType) {\r\n    return function (message, outputBits) {\r\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createMethod = function (bits, padding) {\r\n    var method = createOutputMethod(bits, padding, 'hex');\r\n    method.create = function () {\r\n      return new Keccak(bits, padding, bits);\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(bits, padding, type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var createShakeMethod = function (bits, padding) {\r\n    var method = createShakeOutputMethod(bits, padding, 'hex');\r\n    method.create = function (outputBits) {\r\n      return new Keccak(bits, padding, outputBits);\r\n    };\r\n    method.update = function (message, outputBits) {\r\n      return method.create(outputBits).update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createShakeOutputMethod(bits, padding, type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var algorithms = [\r\n    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},\r\n    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},\r\n    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}\r\n  ];\r\n\r\n  var methods = {}, methodNames = [];\r\n\r\n  for (var i = 0; i < algorithms.length; ++i) {\r\n    var algorithm = algorithms[i];\r\n    var bits  = algorithm.bits;\r\n    for (var j = 0; j < bits.length; ++j) {\r\n      var methodName = algorithm.name +'_' + bits[j];\r\n      methodNames.push(methodName);\r\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\r\n    }\r\n  }\r\n\r\n  function Keccak(bits, padding, outputBits) {\r\n    this.blocks = [];\r\n    this.s = [];\r\n    this.padding = padding;\r\n    this.outputBits = outputBits;\r\n    this.reset = true;\r\n    this.block = 0;\r\n    this.start = 0;\r\n    this.blockCount = (1600 - (bits << 1)) >> 5;\r\n    this.byteCount = this.blockCount << 2;\r\n    this.outputBlocks = outputBits >> 5;\r\n    this.extraBytes = (outputBits & 31) >> 3;\r\n\r\n    for (var i = 0; i < 50; ++i) {\r\n      this.s[i] = 0;\r\n    }\r\n  }\r\n\r\n  Keccak.prototype.update = function (message) {\r\n    var notString = typeof message !== 'string';\r\n    if (notString && message.constructor === ArrayBuffer) {\r\n      message = new Uint8Array(message);\r\n    }\r\n    var length = message.length, blocks = this.blocks, byteCount = this.byteCount,\r\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\r\n\r\n    while (index < length) {\r\n      if (this.reset) {\r\n        this.reset = false;\r\n        blocks[0] = this.block;\r\n        for (i = 1; i < blockCount + 1; ++i) {\r\n          blocks[i] = 0;\r\n        }\r\n      }\r\n      if (notString) {\r\n        for (i = this.start; index < length && i < byteCount; ++index) {\r\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n        }\r\n      } else {\r\n        for (i = this.start; index < length && i < byteCount; ++index) {\r\n          code = message.charCodeAt(index);\r\n          if (code < 0x80) {\r\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n          } else if (code < 0x800) {\r\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else if (code < 0xd800 || code >= 0xe000) {\r\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else {\r\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      if (i >= byteCount) {\r\n        this.start = i - byteCount;\r\n        this.block = blocks[blockCount];\r\n        for (i = 0; i < blockCount; ++i) {\r\n          s[i] ^= blocks[i];\r\n        }\r\n        f(s);\r\n        this.reset = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Keccak.prototype.finalize = function () {\r\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\r\n    blocks[i >> 2] |= this.padding[i & 3];\r\n    if (this.lastByteIndex === this.byteCount) {\r\n      blocks[0] = blocks[blockCount];\r\n      for (i = 1; i < blockCount + 1; ++i) {\r\n        blocks[i] = 0;\r\n      }\r\n    }\r\n    blocks[blockCount - 1] |= 0x80000000;\r\n    for (i = 0; i < blockCount; ++i) {\r\n      s[i] ^= blocks[i];\r\n    }\r\n    f(s);\r\n  };\r\n\r\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var hex = '', block;\r\n    while (j < outputBlocks) {\r\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n        block = s[i];\r\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\r\n               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\r\n               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\r\n               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\r\n      }\r\n      if (j % blockCount === 0) {\r\n        f(s);\r\n        i = 0;\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      block = s[i];\r\n      if (extraBytes > 0) {\r\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\r\n      }\r\n      if (extraBytes > 1) {\r\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\r\n      }\r\n      if (extraBytes > 2) {\r\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\r\n      }\r\n    }\r\n    return hex;\r\n  };\r\n\r\n  Keccak.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var bytes = this.outputBits >> 3;\r\n    var buffer;\r\n    if (extraBytes) {\r\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\r\n    } else {\r\n      buffer = new ArrayBuffer(bytes);\r\n    }\r\n    var array = new Uint32Array(buffer);\r\n    while (j < outputBlocks) {\r\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n        array[j] = s[i];\r\n      }\r\n      if (j % blockCount === 0) {\r\n        f(s);\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      array[i] = s[i];\r\n      buffer = buffer.slice(0, bytes);\r\n    }\r\n    return buffer;\r\n  };\r\n\r\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\r\n\r\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var array = [], offset, block;\r\n    while (j < outputBlocks) {\r\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n        offset = j << 2;\r\n        block = s[i];\r\n        array[offset] = block & 0xFF;\r\n        array[offset + 1] = (block >> 8) & 0xFF;\r\n        array[offset + 2] = (block >> 16) & 0xFF;\r\n        array[offset + 3] = (block >> 24) & 0xFF;\r\n      }\r\n      if (j % blockCount === 0) {\r\n        f(s);\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      offset = j << 2;\r\n      block = s[i];\r\n      if (extraBytes > 0) {\r\n        array[offset] = block & 0xFF;\r\n      }\r\n      if (extraBytes > 1) {\r\n        array[offset + 1] = (block >> 8) & 0xFF;\r\n      }\r\n      if (extraBytes > 2) {\r\n        array[offset + 2] = (block >> 16) & 0xFF;\r\n      }\r\n    }\r\n    return array;\r\n  };\r\n\r\n  var f = function (s) {\r\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\r\n        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\r\n        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\r\n        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\r\n    for (n = 0; n < 48; n += 2) {\r\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\r\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\r\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\r\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\r\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\r\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\r\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\r\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\r\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\r\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\r\n\r\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\r\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\r\n      s[0] ^= h;\r\n      s[1] ^= l;\r\n      s[10] ^= h;\r\n      s[11] ^= l;\r\n      s[20] ^= h;\r\n      s[21] ^= l;\r\n      s[30] ^= h;\r\n      s[31] ^= l;\r\n      s[40] ^= h;\r\n      s[41] ^= l;\r\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\r\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\r\n      s[2] ^= h;\r\n      s[3] ^= l;\r\n      s[12] ^= h;\r\n      s[13] ^= l;\r\n      s[22] ^= h;\r\n      s[23] ^= l;\r\n      s[32] ^= h;\r\n      s[33] ^= l;\r\n      s[42] ^= h;\r\n      s[43] ^= l;\r\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\r\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\r\n      s[4] ^= h;\r\n      s[5] ^= l;\r\n      s[14] ^= h;\r\n      s[15] ^= l;\r\n      s[24] ^= h;\r\n      s[25] ^= l;\r\n      s[34] ^= h;\r\n      s[35] ^= l;\r\n      s[44] ^= h;\r\n      s[45] ^= l;\r\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\r\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\r\n      s[6] ^= h;\r\n      s[7] ^= l;\r\n      s[16] ^= h;\r\n      s[17] ^= l;\r\n      s[26] ^= h;\r\n      s[27] ^= l;\r\n      s[36] ^= h;\r\n      s[37] ^= l;\r\n      s[46] ^= h;\r\n      s[47] ^= l;\r\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\r\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\r\n      s[8] ^= h;\r\n      s[9] ^= l;\r\n      s[18] ^= h;\r\n      s[19] ^= l;\r\n      s[28] ^= h;\r\n      s[29] ^= l;\r\n      s[38] ^= h;\r\n      s[39] ^= l;\r\n      s[48] ^= h;\r\n      s[49] ^= l;\r\n\r\n      b0 = s[0];\r\n      b1 = s[1];\r\n      b32 = (s[11] << 4) | (s[10] >>> 28);\r\n      b33 = (s[10] << 4) | (s[11] >>> 28);\r\n      b14 = (s[20] << 3) | (s[21] >>> 29);\r\n      b15 = (s[21] << 3) | (s[20] >>> 29);\r\n      b46 = (s[31] << 9) | (s[30] >>> 23);\r\n      b47 = (s[30] << 9) | (s[31] >>> 23);\r\n      b28 = (s[40] << 18) | (s[41] >>> 14);\r\n      b29 = (s[41] << 18) | (s[40] >>> 14);\r\n      b20 = (s[2] << 1) | (s[3] >>> 31);\r\n      b21 = (s[3] << 1) | (s[2] >>> 31);\r\n      b2 = (s[13] << 12) | (s[12] >>> 20);\r\n      b3 = (s[12] << 12) | (s[13] >>> 20);\r\n      b34 = (s[22] << 10) | (s[23] >>> 22);\r\n      b35 = (s[23] << 10) | (s[22] >>> 22);\r\n      b16 = (s[33] << 13) | (s[32] >>> 19);\r\n      b17 = (s[32] << 13) | (s[33] >>> 19);\r\n      b48 = (s[42] << 2) | (s[43] >>> 30);\r\n      b49 = (s[43] << 2) | (s[42] >>> 30);\r\n      b40 = (s[5] << 30) | (s[4] >>> 2);\r\n      b41 = (s[4] << 30) | (s[5] >>> 2);\r\n      b22 = (s[14] << 6) | (s[15] >>> 26);\r\n      b23 = (s[15] << 6) | (s[14] >>> 26);\r\n      b4 = (s[25] << 11) | (s[24] >>> 21);\r\n      b5 = (s[24] << 11) | (s[25] >>> 21);\r\n      b36 = (s[34] << 15) | (s[35] >>> 17);\r\n      b37 = (s[35] << 15) | (s[34] >>> 17);\r\n      b18 = (s[45] << 29) | (s[44] >>> 3);\r\n      b19 = (s[44] << 29) | (s[45] >>> 3);\r\n      b10 = (s[6] << 28) | (s[7] >>> 4);\r\n      b11 = (s[7] << 28) | (s[6] >>> 4);\r\n      b42 = (s[17] << 23) | (s[16] >>> 9);\r\n      b43 = (s[16] << 23) | (s[17] >>> 9);\r\n      b24 = (s[26] << 25) | (s[27] >>> 7);\r\n      b25 = (s[27] << 25) | (s[26] >>> 7);\r\n      b6 = (s[36] << 21) | (s[37] >>> 11);\r\n      b7 = (s[37] << 21) | (s[36] >>> 11);\r\n      b38 = (s[47] << 24) | (s[46] >>> 8);\r\n      b39 = (s[46] << 24) | (s[47] >>> 8);\r\n      b30 = (s[8] << 27) | (s[9] >>> 5);\r\n      b31 = (s[9] << 27) | (s[8] >>> 5);\r\n      b12 = (s[18] << 20) | (s[19] >>> 12);\r\n      b13 = (s[19] << 20) | (s[18] >>> 12);\r\n      b44 = (s[29] << 7) | (s[28] >>> 25);\r\n      b45 = (s[28] << 7) | (s[29] >>> 25);\r\n      b26 = (s[38] << 8) | (s[39] >>> 24);\r\n      b27 = (s[39] << 8) | (s[38] >>> 24);\r\n      b8 = (s[48] << 14) | (s[49] >>> 18);\r\n      b9 = (s[49] << 14) | (s[48] >>> 18);\r\n\r\n      s[0] = b0 ^ (~b2 & b4);\r\n      s[1] = b1 ^ (~b3 & b5);\r\n      s[10] = b10 ^ (~b12 & b14);\r\n      s[11] = b11 ^ (~b13 & b15);\r\n      s[20] = b20 ^ (~b22 & b24);\r\n      s[21] = b21 ^ (~b23 & b25);\r\n      s[30] = b30 ^ (~b32 & b34);\r\n      s[31] = b31 ^ (~b33 & b35);\r\n      s[40] = b40 ^ (~b42 & b44);\r\n      s[41] = b41 ^ (~b43 & b45);\r\n      s[2] = b2 ^ (~b4 & b6);\r\n      s[3] = b3 ^ (~b5 & b7);\r\n      s[12] = b12 ^ (~b14 & b16);\r\n      s[13] = b13 ^ (~b15 & b17);\r\n      s[22] = b22 ^ (~b24 & b26);\r\n      s[23] = b23 ^ (~b25 & b27);\r\n      s[32] = b32 ^ (~b34 & b36);\r\n      s[33] = b33 ^ (~b35 & b37);\r\n      s[42] = b42 ^ (~b44 & b46);\r\n      s[43] = b43 ^ (~b45 & b47);\r\n      s[4] = b4 ^ (~b6 & b8);\r\n      s[5] = b5 ^ (~b7 & b9);\r\n      s[14] = b14 ^ (~b16 & b18);\r\n      s[15] = b15 ^ (~b17 & b19);\r\n      s[24] = b24 ^ (~b26 & b28);\r\n      s[25] = b25 ^ (~b27 & b29);\r\n      s[34] = b34 ^ (~b36 & b38);\r\n      s[35] = b35 ^ (~b37 & b39);\r\n      s[44] = b44 ^ (~b46 & b48);\r\n      s[45] = b45 ^ (~b47 & b49);\r\n      s[6] = b6 ^ (~b8 & b0);\r\n      s[7] = b7 ^ (~b9 & b1);\r\n      s[16] = b16 ^ (~b18 & b10);\r\n      s[17] = b17 ^ (~b19 & b11);\r\n      s[26] = b26 ^ (~b28 & b20);\r\n      s[27] = b27 ^ (~b29 & b21);\r\n      s[36] = b36 ^ (~b38 & b30);\r\n      s[37] = b37 ^ (~b39 & b31);\r\n      s[46] = b46 ^ (~b48 & b40);\r\n      s[47] = b47 ^ (~b49 & b41);\r\n      s[8] = b8 ^ (~b0 & b2);\r\n      s[9] = b9 ^ (~b1 & b3);\r\n      s[18] = b18 ^ (~b10 & b12);\r\n      s[19] = b19 ^ (~b11 & b13);\r\n      s[28] = b28 ^ (~b20 & b22);\r\n      s[29] = b29 ^ (~b21 & b23);\r\n      s[38] = b38 ^ (~b30 & b32);\r\n      s[39] = b39 ^ (~b31 & b33);\r\n      s[48] = b48 ^ (~b40 & b42);\r\n      s[49] = b49 ^ (~b41 & b43);\r\n\r\n      s[0] ^= RC[n];\r\n      s[1] ^= RC[n + 1];\r\n    }\r\n  };\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = methods;\r\n  } else {\r\n    for (var i = 0; i < methodNames.length; ++i) {\r\n      root[methodNames[i]] = methods[methodNames[i]];\r\n    }\r\n  }\r\n})();\r\n"],"sourceRoot":""}